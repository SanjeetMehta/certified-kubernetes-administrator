Namespaces: In Kubernetes, namespaces provides a mechanism for isolating groups of resources within a single cluster. 
    Names of resources need to be unique within a namespace, but not across namespaces. 
    Namespace-based scoping is applicable only for namespaced objects (e.g. Deployments, Services, etc) 
    and not for cluster-wide objects (e.g. StorageClass, Nodes, PersistentVolumes, etc).

    Resources within a namespace can refer to each other simply by their names.
    Resources of a different namespace can be refered using the complete name, i.e service-name.dev.svc.cluster.local
        cluster.local: domain of the cluster
        svc: subdomain for service.
        dev: namespace
        service-name: name of the service

    By default we are in default namespace.

    To limit a resource in a namespace create resource quota.

Namespace definition:

apiVersion: v1
kind: Namespace
metadata:
    name: dev

kubectl commands:
    kubectl get pods --namespace=<namespace_name> (lists all the pods in the given namespace)
    kubectl create -f pod-definition.yml --namespace=<namespace_name> (creates the pod in the given namespace or Namespace can be added inside the metadata section of the pod.)
    kubectl create -f namespace-dev.yml (Creates namespace using a file.)
    kubectl create namespace <namespace_name> (Creates namespace using command.)
    kubectl config set-context $(kubectl config current-context) --namespace=<namespace_name> (Changes the default config to point to the new namespace)
    kubectl get pods --all-namespaces (lists pods of all the namespaces)

Namespace ResourceQuota definition:

apiVersion: v1
kind: ResourceQuota
metadata:
    name: compute-quota
    namespace: dev
spec:
    hard:
        pods: "10"
        requests.cpu: "4"
        requests.memory: 5Gi
        limits.cpu: "10"
        limits.memory: 10Gi

kubectl commands:
    kubectl create -f compute-quota.yml (Creates quota using a file.)